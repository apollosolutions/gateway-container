apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gateway
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  strategy: {}
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - image: gateway
        name: gateway
        resources:
          requests:
            cpu: "1"
            memory: 1024Mi # TODO validate
          limits:
            cpu: "1"
            memory: 1024Mi # TODO validate
        env:
          - name: NODE_ENV
            value: "production"
          # - name: APOLLO_GATEWAY_CONFIG_FILE
          #   value: /etc/config/gateway.yaml
        ports:
        - name: http
          containerPort: 4000
        volumeMounts:
          - name: gateway-config
            mountPath: /etc/config
        livenessProbe:
          httpGet:
            path: /.well-known/apollo/server-health
            port: http
        readinessProbe:
          httpGet:
            path: /.well-known/apollo/server-health
            port: http
      volumes:
        - name: gateway-config
          configMap:
            name: gateway-files
            items:
              - key: gateway.yaml
                path: gateway.yaml
              - key: supergraph.graphql
                path: supergraph.graphql
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-files
data:
  gateway.yaml: |
    server:
      debug: true
      cors:
        origin: "*"
    gateway:
      debug: true
      supergraphSdlPath: /etc/config/supergraph.graphql
  supergraph.graphql: |
    schema
      @core(feature: "https://specs.apollo.dev/core/v0.1"),
      @core(feature: "https://specs.apollo.dev/join/v0.1")
    {
      query: Query
    }

    directive @core(feature: String!) repeatable on SCHEMA

    directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

    directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

    directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    type Astronaut
      @join__owner(graph: ASTRONAUTS)
      @join__type(graph: ASTRONAUTS, key: "id")
      @join__type(graph: MISSIONS, key: "id")
    {
      id: ID! @join__field(graph: ASTRONAUTS)
      name: String @join__field(graph: ASTRONAUTS)
    }

    scalar join__FieldSet

    enum join__Graph {
      ASTRONAUTS @join__graph(name: "astronauts" url: "http://astronauts:4001/graphql")
      MISSIONS @join__graph(name: "missions" url: "http://missions:4002/graphql")
    }

    type Mission {
      id: ID!
      name: String
      crew: [Astronaut!]!
    }

    type Query {
      astronaut(id: ID!): Astronaut @join__field(graph: ASTRONAUTS)
      echoHeaderA(name: String!): String @join__field(graph: ASTRONAUTS)
      mission(id: ID!): Mission @join__field(graph: MISSIONS)
      echoHeaderM(name: String!): String @join__field(graph: MISSIONS)
    }
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 4000
      targetPort: 4000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gateway
            port:
              number: 4000
